import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'application'
    id "org.openjfx.javafxplugin" version "0.1.0"
}

version = '1.0'

java {
    modularity.inferModulePath.set(false)
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javafx {
    version = "21.0.1"
    modules = ['javafx.controls', 'javafx.fxml']
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    implementation 'com.google.guava:guava:32.0.0-android'
    implementation 'black.ninia:jep:4.2.0'
}

application {
    mainClass.set('App')
}

test {
    useJUnitPlatform()
}

// You can manually set the java.library.path system property here
// ↓↓↓↓↓↓↓↓↓↓↓↓
//run.systemProperty "java.library.path", "<your-path-here>"



tasks.register('setJavaLibraryPath') {
    doLast {
        def jepPathFile = new File('jepPath.txt')
        def jepPath
        if (jepPathFile.exists()) {
            // If the file exists, read the location from the file
            jepPath = jepPathFile.text
        } else {
            // If the file doesn't exist, determine the location and save it in the file
            def jepLocation = new ByteArrayOutputStream()
            exec {
                commandLine 'pip', 'show', 'jep'
                standardOutput = jepLocation
            }
            jepPath = jepLocation.toString().split("\n").find { it.startsWith("Location: ") }.split(": ")[1] + "/jep/"
            jepPathFile.write(jepPath)
        }

        // Set the java.library.path system property
        if (OperatingSystem.current().isWindows()) {
            System.setProperty("java.library.path", jepPath.replace('/', '\\'))
        } else {
            System.setProperty("java.library.path", jepPath)
        }
    }

// Or you can uncomment the following line to automatically set the java.library.path system property
// using the 'setJavaLibraryPath' task. This task determines the location of the Jep native library
// and saves it in a file named 'jepPath.txt'. For subsequent runs, the task reads the location from
// the file instead of determining it again.
// ↓↓↓↓↓↓↓↓↓↓↓↓
run.dependsOn tasks.named('setJavaLibraryPath')


}